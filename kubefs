#!/bin/bash

default_helper() {
    TYPE=$1
    if [ $TYPE -eq 1 ]; then
        echo "$2 is not a valid argument, please follow types below"
    fi

    echo "kubefs - a cli tool to create & deploy full stack applications onto kubernetes clusters

    kubefs auth - authenticate into kubefs platform to use features
    kubefs build - create docker images & helm charts for created resources to be deployed onto the clusters
    kubefs config - config login credentials & deployment targets to be used 
    kubefs create - easily create backend, frontend, & db constructs to be used within your application
    kubefs deploy - deploy the build targets onto the cluster!
    kubefs init <project_name> - download all required dependencies & set up configuration files
    kubefs exec - exec go components to test your code
    kubefs setup - setup kubefs for the first time
    "
}

validate_auth(){
    if [ -z "$(pass show kubefs/auth 2>/dev/null)" ]; then
        echo "Please authenticate into kubefs platform using 'kubefs auth' or 'kubefs setup'"
        return 1
    fi

    auth_data=$(pass show kubefs/auth)
    expires_in=$(echo $auth_data | jq -r '.expires_in')
    issued_at=$(echo $auth_data | jq -r '.issued_at')
    current_time=$(date +%s)

    if [ $((current_time)) -ge $((issued_at + expires_in)) ]; then
        echo "Authentication token has expired. Please authenticate again using 'kubefs auth' or 'kubefs setup'"
        return 1
    fi
}

main(){
    SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

    if [ "$1" == "setup" ]; then
        source ${SCRIPT_DIR}/scripts/setup.sh
        return 0
    fi

    if [ "$1" == "auth" ]; then
        shift
        source ${SCRIPT_DIR}/scripts/auth.sh
        return 0
    fi

    validate_auth
    if [ $? -eq 1 ]; then
        default_helper 0
        return 0
    fi

    command=$1
    shift
    case $command in
        "build") source ${SCRIPT_DIR}/scripts/build.sh;;
        "config") source ${SCRIPT_DIR}/scripts/config.sh;;
        "create") source ${SCRIPT_DIR}/scripts/create.sh;;
        "deploy") source ${SCRIPT_DIR}/scripts/deploy.sh;;
        "init") source ${SCRIPT_DIR}/scripts/init.sh;;
        "exec") source ${SCRIPT_DIR}/scripts/exec.sh;;
        "--help") default_helper 0;;
        *) default_helper 1 $command;;
    esac
}

main $@
exit 0


