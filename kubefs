#!/bin/bash

default_helper() {
    TYPE=$1
    if [ $TYPE -eq 1 ]; then
        echo "$2 is not a valid argument, please follow types below"
    fi

    echo "
    kubefs - a cli tool to create & deploy full stack applications onto kubernetes clusters

    kubefs config - config login credentials & deployment targets to be used 
    kubefs create - easily create backend, frontend, & db constructs to be used within your application
    kubefs docker - create & test docker images for created resources to be deployed onto the clusters
    kubefs deploy - deploy the build targets onto the cluster!
    kubefs describe - describe the information about a construct
    kubefs init <project_name> - download all required dependencies & set up configuration files
    kubefs exec - execute components to test your code
    kubefs setup - setup kubefs for the first time
    kubefs undeploy - undeploy components from release
    "
}

source_scripts(){
    if [ -z $KUBEFS_CONFIG ]; then
        echo "Please run kubefs setup to configure your kubefs environment"
        return 1
    fi

    file_path=$1
    shift
    source $file_path
}

main(){
    
    if [ -z "$1" ]; then
        default_helper 0
        return 0
    fi

    command=$1
    shift
    case $command in
        "config") source_scripts ${KUBEFS_CONFIG}/scripts/config.sh $@;;
        "create") source_scripts ${KUBEFS_CONFIG}/scripts/create.sh $@;;
        "deploy") source_scripts ${KUBEFS_CONFIG}/scripts/deploy.sh $@;;
        "describe") source_scripts ${KUBEFS_CONFIG}/scripts/describe.sh $@;;
        "docker") source_scripts ${KUBEFS_CONFIG}/scripts/docker.sh $@;;
        "exec") source_scripts ${KUBEFS_CONFIG}/scripts/exec.sh $@;;
        "init") source_scripts ${KUBEFS_CONFIG}/scripts/init.sh $@;;
        "setup") source $KUBEFS_CONFIG/scripts/setup.sh;;
        "undeploy") source_scripts ${KUBEFS_CONFIG}/scripts/undeploy.sh $@;;
        "--help") default_helper 0;;
        *) default_helper 1 $command;;
    esac
}

main $@
exit 0


