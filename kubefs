#!/bin/bash

default_helper() {
    echo "${1} is not a valid argument, please follow types below
    kubefs - a cli tool to create & deploy full stack applications onto kubernetes clusters

    kubefs build - create docker images & helm charts for created resources to be deployed onto the clusters
    kubefs config - config login credentials & deployment targets to be used 
    kubefs create - easily create backend, frontend, & db constructs to be used within your application
    kubefs deploy - deploy the build targets onto the cluster!
    kubefs init <project_name> - download all required dependencies & set up configuration files
    kubefs exec - exec go components to test your code
    "
}

init_project() {
    if [ -z $1 ]; then
        default_helper $2
        return 1;
    fi

    mkdir $1 && cd $1

    #Downloading brew if not downloaded
    echo "Verifing homebrew installation..."
    if !(command -v brew &> /dev/null); then
        echo "Installing homebrew package manager..."
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)";
        test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
        test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bashrc
    fi

    #Downloading go if not downloaded
    echo "Verifying go installation..."
    if !(command -v go &> /dev/null); then
        echo "Installing go..."
        mkdir $HOME/go
        echo "" >> ~/.bashrc && echo '''export GOPATH=$HOME/go''' >> ~/.bashrc
        echo '''export GOROOT="$(brew --prefix golang)/libexec"''' >> ~/.bashrc
        echo '''export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"''' >> ~/.bashrc
        source ~/.bashrc
        brew install go
    fi


    # prompt to download minikube
    echo "Verifying minikube installation..."
    if !(command -v minikube &> /dev/null); then
        echo "Downloading minikube..."
        brew install minikube
    fi

    # prompt to download docker
    echo "Verifying docker installation..."
    if !(command -v docker &> /dev/null); then
        echo "Downloading docker..."
        brew install docker
    fi 

    echo "Verifying node installation..."
    if !(command -v node &> /dev/null); then
        echo "Downloading node..."
        brew install node
    fi

    echo "Verifying jq installation..."
    if !(command -v jq &> /dev/null); then
        echo "Downloading jq..."
        brew install jq
    fi

    # create project directory && configuration files
    touch manifest.kubefs
    echo "KUBEFS_NAME=$1" >> manifest.kubefs && echo "KUBEFS_ROOT=`pwd`" >> manifest.kubefs

    echo "Successfully created $1 project"
}

main(){
    SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"

    command=$1
    shift
    case $command in
        "build") source ${SCRIPT_DIR}/scripts/build.sh;;
        "config") source ${SCRIPT_DIR}/scripts/config.sh;;
        "create") source ${SCRIPT_DIR}/scripts/create.sh;;
        "deploy") source ${SCRIPT_DIR}/scripts/deploy.sh;;
        "init") init_project $1;;
        "exec") source ${SCRIPT_DIR}/scripts/exec.sh;;
        "--help") default_helper $command;;
        *) default_helper $command;;
    esac
}

main $@
exit 0


